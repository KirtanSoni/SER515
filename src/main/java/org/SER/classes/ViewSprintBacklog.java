package org.SER.classes;

import javax.swing.*;
import javax.swing.border.EmptyBorder;
import javax.swing.table.DefaultTableCellRenderer;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.geom.Ellipse2D;
import java.util.List;

/**
 *
 * @author monil
 */
public class ViewSprintBacklog extends javax.swing.JFrame {
    SprintBacklog spbl;

//    public class TableActionCellRenderEdit extends DefaultTableCellRenderer {
//
//    @Override
//    public Component getTableCellRendererComponent(JTable table, Object o, boolean isSelected, boolean hasFocus, int row, int column) {
//        Component com = super.getTableCellRendererComponent(table, o, isSelected, hasFocus, row, column); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/OverriddenMethodBody
//
//        PanelActionEdit action =  new PanelActionEdit();
//
//        if(isSelected==false && row%2==0){
//            action.setBackground(Color.WHITE);
//        }else{
//            action.setBackground(com.getBackground());
//        }
//        return action;
//    }
    public void setSprintBacklog(SprintBacklog s){
        this.spbl = s;
    }
    public class TableActionCellRenderDelete extends DefaultTableCellRenderer {

        @Override
        public Component getTableCellRendererComponent(JTable table, Object o, boolean isSelected, boolean hasFocus, int row, int column) {
            Component com = super.getTableCellRendererComponent(table, o, isSelected, hasFocus, row, column); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/OverriddenMethodBody

            PanelActionDelete action =  new PanelActionDelete();

            if(isSelected==false && row%2==0){
                action.setBackground(Color.WHITE);
            }else{
                action.setBackground(com.getBackground());
            }
            return action;
        }



    }
//    public class TableActionCellEditorEdit extends DefaultCellEditor{
//
//    public TableActionCellEditorEdit() {
//        super(new JCheckBox());
//    }
//
//
//
//    @Override
//    public Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected, int row, int column) {
//
//        PanelActionEdit action = new PanelActionEdit();
//        action.setBackground(table.getSelectionBackground());
//        return action;
//    }

    //}
    public class TableActionCellEditorDelete extends DefaultCellEditor{

        public TableActionCellEditorDelete() {
            super(new JCheckBox());
        }



        @Override
        public Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected, int row, int column) {

            PanelActionDelete action = new PanelActionDelete();
            action.setBackground(table.getSelectionBackground());
            return action;
        }



    }
//public class PanelActionEdit extends javax.swing.JPanel {
//
//
//    public PanelActionEdit() {
//        initComponents();
//    }
//
//    /**
//     * This method is called from within the constructor to initialize the form.
//     * WARNING: Do NOT modify this code. The content of this method is always
//     * regenerated by the Form Editor.
//     */
//    @SuppressWarnings("unchecked")
//    // <editor-fold defaultstate="collapsed" desc="Generated Code">
//    private void initComponents() {
//
//        edit = new javax.swing.JButton();
//
//        edit.setFont(new java.awt.Font("Calibri", 0, 10)); // NOI18N
//        edit.setText("Edit");
//        edit.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
//        edit.setIconTextGap(1);
//        edit.setMargin(new java.awt.Insets(2, 2, 2, 2));
//        edit.setMaximumSize(new java.awt.Dimension(32, 19));
//        edit.setMinimumSize(new java.awt.Dimension(32, 19));
//        edit.setPreferredSize(new java.awt.Dimension(32, 19));
//        edit.addActionListener(new java.awt.event.ActionListener() {
//            public void actionPerformed(java.awt.event.ActionEvent evt) {
//                editActionPerformed(evt);
//            }
//        });
//
//        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
//        this.setLayout(layout);
//        layout.setHorizontalGroup(
//            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
//            .addGroup(layout.createSequentialGroup()
//                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
//                .addComponent(edit, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
//                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
//        );
//        layout.setVerticalGroup(
//            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
//            .addGroup(layout.createSequentialGroup()
//                .addComponent(edit, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
//                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
//        );
//    }// </editor-fold>
//
//    private void editActionPerformed(java.awt.event.ActionEvent evt) {
//
//    }
//
//
//    // Variables declaration - do not modify
//    private javax.swing.JButton edit;
//    // End of variables declaration
//}

    public class PanelActionDelete extends javax.swing.JPanel {

        /**
         * Creates new form PanelAction2
         */
        public PanelActionDelete() {
            initComponents();
        }

        /**
         * This method is called from within the constructor to initialize the form.
         * WARNING: Do NOT modify this code. The content of this method is always
         * regenerated by the Form Editor.
         */
        @SuppressWarnings("unchecked")
        // <editor-fold defaultstate="collapsed" desc="Generated Code">
        private void initComponents() {

            delete = new JButton();

            setAlignmentX(0.0F);
            setAlignmentY(0.0F);
            setPreferredSize(new java.awt.Dimension(51, 21));

            delete.setFont(new java.awt.Font("Calibri", 0, 10)); // NOI18N
            delete.setText("Delete");
            delete.setAlignmentY(0.0F);
            delete.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
            delete.setIconTextGap(1);
            delete.setInheritsPopupMenu(true);
            delete.setMargin(new java.awt.Insets(2, 2, 2, 2));
            delete.setMaximumSize(new java.awt.Dimension(32, 18));
            delete.setMinimumSize(new java.awt.Dimension(32, 18));
            delete.setPreferredSize(new java.awt.Dimension(32, 19));
            delete.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    deleteActionPerformed(evt);
                }
            });

            javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
            this.setLayout(layout);
            layout.setHorizontalGroup(
                    layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(delete, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            );
            layout.setVerticalGroup(
                    layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                    .addComponent(delete, javax.swing.GroupLayout.DEFAULT_SIZE, 18, Short.MAX_VALUE)
                                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            );
        }// </editor-fold>

        private void deleteActionPerformed(java.awt.event.ActionEvent evt) {
            // TODO add your handling code here:
        }


        // Variables declaration - do not modify
        private JButton delete;
        // End of variables declaration
    }


    public class ActionButton extends JButton{

        private boolean mousePress;

        public ActionButton() {
            setContentAreaFilled(false);
            setBorder(new EmptyBorder(3,3,3,3));
            addMouseListener(new MouseAdapter(){
                @Override
                public void mousePressed(MouseEvent e) {
                    mousePress = true;
                }

                @Override
                public void mouseReleased(MouseEvent e) {
                    mousePress = false;
                }

            });
        }

        @Override
        protected void paintComponent(Graphics g) {

            Graphics2D g2 = (Graphics2D)g.create();
            g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
            int width = getWidth();
            int height = getHeight();
            int size = Math.min(width, height);
            int x = (width-size)/2;
            int y = (height-size)/2;
            if(mousePress){
                g2.setColor(new Color(158,158,158));
            } else {
                g2.setColor(new Color(199,199,199));
            }
            g2.fill(new Ellipse2D.Double(x, y, size, size));
            g2.dispose();
            super.paintComponent(g);
        }



    }










    /**
     * Creates new form ViewSprintBacklog
     */
    public ViewSprintBacklog(SprintBacklog spbl) {
        this.spbl = spbl;
        initComponents();
//        backlogTable.getColumnModel().getColumn(3).setCellRenderer(new TableActionCellRenderEdit());
//        backlogTable.getColumnModel().getColumn(3).setCellEditor(new TableActionCellEditorEdit());
        backlogTable.getColumnModel().getColumn(3).setCellRenderer(new TableActionCellRenderDelete());
        backlogTable.getColumnModel().getColumn(3).setCellEditor(new TableActionCellEditorDelete());
        endSprint.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                    handleEndSprint();
            }
        });
        report.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                handleReport();
            }
        });
    }

    private void handleEndSprint() {
        System.out.println("end sprint");
    }
    private void handleReport() {
        // Add your logic here for handling the end of the sprint
        int[] workDone = {10, 50, 60, 70, 90,100};

        // For example, you can update the UI, perform calculations, etc.
        SwingUtilities.invokeLater(() -> {
            BurndownChart burndownChart = new BurndownChart("Burndown Chart", workDone);
            burndownChart.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);  // Change this line
            burndownChart.pack();
            burndownChart.setLocationRelativeTo(null);
            burndownChart.setVisible(true);
        });
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">

    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        sprintBacklogLabel = new javax.swing.JLabel();
        progress = new javax.swing.JProgressBar();
        result = new JButton();
        endSprint = new JButton();
        report = new JButton();
        jPanel1 = new javax.swing.JPanel();
        startLabel = new javax.swing.JLabel();
        endLabel = new javax.swing.JLabel();
        startDate = new javax.swing.JTextField();
        endDate = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        logTable = new JTable();
        jCalendar1 = new com.toedter.calendar.JCalendar();
        jScrollPane2 = new javax.swing.JScrollPane();
        backlogTable = new JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Sprint Backlog");

        mainPanel.setBackground(new Color(236, 236, 236));

        sprintBacklogLabel.setFont(new java.awt.Font("Calibri", 1, 26)); // NOI18N
        sprintBacklogLabel.setText("Sprint Backlog");

        progress.setFont(new java.awt.Font("Calibri", 0, 10)); // NOI18N
        progress.setForeground(new Color(0, 102, 204));
        progress.setValue(70);
        progress.setStringPainted(true);

        result.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        result.setLabel("Result");
        result.setOpaque(true);

        endSprint.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        endSprint.setLabel("End Sprint");
        endSprint.setOpaque(true);


        report.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        report.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        report.setLabel("Report");
        report.setMaximumSize(new java.awt.Dimension(40, 20));
        report.setMinimumSize(new java.awt.Dimension(40, 20));

        startLabel.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        startLabel.setText("Scheduled to Start :");

        endLabel.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        endLabel.setText("Scheduled to End :");

        startDate.setText("Fixed start date");

        endDate.setText("Fixed end date");

        jScrollPane1.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N

        logTable.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        logTable.setModel(new javax.swing.table.DefaultTableModel(
                new Object [][] {
                        {null},
                        {null},
                        {null},
                        {null}
                },
                new String [] {
                        "Logs :"
                }
        ) {
            Class[] types = new Class [] {
                    String.class
            };
            boolean[] canEdit = new boolean [] {
                    false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        logTable.setShowGrid(true);
        logTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(logTable);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                        .addComponent(endDate)
                                                        .addComponent(startLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(endLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 112, Short.MAX_VALUE)
                                                        .addComponent(startDate, javax.swing.GroupLayout.Alignment.LEADING))
                                                .addGap(101, 124, Short.MAX_VALUE))
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                                .addGap(6, 6, 6)
                                                                .addComponent(jCalendar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                .addGap(6, 6, 6)))
                                                .addContainerGap())))
        );
        jPanel1Layout.setVerticalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(15, 15, 15)
                                .addComponent(startLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(startDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(10, 10, 10)
                                .addComponent(endLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(endDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jCalendar1, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        backlogTable.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N

        List<UserStory> Sp= spbl.getsprintBacklog();
        Object[][] concatedStories = new Object[Sp.size()][4];
        for(int i=0;i<Sp.size();i++){
            UserStory userStory = Sp.get(i);
            concatedStories[i][0] = userStory.getTitle();
            concatedStories[i][1] = userStory.getBusinessValue();
            concatedStories[i][2] = userStory.getDeveloperValue();
            concatedStories[i][3] = "Delete";
        }

        backlogTable.setModel(new javax.swing.table.DefaultTableModel(
                concatedStories,
                new String [] {
                        "User Story", "Bsn.Value", "Story Pts", "Delete"
                }
        ) {
            Class[] types = new Class [] {
                    Object.class, Integer.class, Integer.class, Object.class
            };
            boolean[] canEdit = new boolean [] {
                    false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        backlogTable.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);
        backlogTable.setRowHeight(30);
        backlogTable.setSelectionBackground(new Color(0, 102, 204));
        backlogTable.setShowVerticalLines(true);
        backlogTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(backlogTable);
        if (backlogTable.getColumnModel().getColumnCount() > 0) {
            backlogTable.getColumnModel().getColumn(1).setMinWidth(65);
            backlogTable.getColumnModel().getColumn(1).setPreferredWidth(65);
            backlogTable.getColumnModel().getColumn(1).setMaxWidth(65);
            backlogTable.getColumnModel().getColumn(2).setMinWidth(60);
            backlogTable.getColumnModel().getColumn(2).setPreferredWidth(60);
            backlogTable.getColumnModel().getColumn(2).setMaxWidth(60);
            backlogTable.getColumnModel().getColumn(3).setMinWidth(65);
            backlogTable.getColumnModel().getColumn(3).setPreferredWidth(65);
            backlogTable.getColumnModel().getColumn(3).setMaxWidth(65);
        }

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
                mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(mainPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(mainPanelLayout.createSequentialGroup()
                                                .addComponent(sprintBacklogLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE)
                                                .addGap(12, 12, 12)
                                                .addComponent(progress, javax.swing.GroupLayout.DEFAULT_SIZE, 136, Short.MAX_VALUE)
                                                .addGap(18, 18, 18)
                                                .addComponent(result, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(endSprint, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(report, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(mainPanelLayout.createSequentialGroup()
                                                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 466, Short.MAX_VALUE)
                                                .addGap(7, 7, 7)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addContainerGap())
        );
        mainPanelLayout.setVerticalGroup(
                mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(mainPanelLayout.createSequentialGroup()
                                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(mainPanelLayout.createSequentialGroup()
                                                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(mainPanelLayout.createSequentialGroup()
                                                                .addGap(13, 13, 13)
                                                                .addComponent(sprintBacklogLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addGap(8, 8, 8))
                                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                                                                .addContainerGap()
                                                                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                        .addComponent(progress, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                                                .addComponent(result, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                                .addComponent(endSprint, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                                .addComponent(report, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                                                .addContainerGap()
                                                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>

    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
//         */
//        try {
//            for (UIManager.LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(ViewSprintBacklog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(ViewSprintBacklog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(ViewSprintBacklog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(ViewSprintBacklog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new ViewSprintBacklog().setVisible(true);
//            }
//        });
//    }

    // Variables declaration - do not modify
    private JTable backlogTable;
    private javax.swing.JTextField endDate;
    private javax.swing.JLabel endLabel;
    private com.toedter.calendar.JCalendar jCalendar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private JTable logTable;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JProgressBar progress;
    private JButton report;
    private JButton result;

    private JButton endSprint;
    private javax.swing.JLabel sprintBacklogLabel;
    private javax.swing.JTextField startDate;
    private javax.swing.JLabel startLabel;
    // End of variables declaration
}
